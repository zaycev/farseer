# -*- coding: utf-8 -*-import timeimport threadingimport multiprocessingimport loggingimport tracebackclass Behavior(object):	PROC = 0	THREAD = 1class Service(object):	name = "service"	behavior_mode = Behavior.THREAD	logger_cls = None	main_loop_timeout = 2	send_timeout = 1	receive_timeout = 1	def __init__(self, *args, **kwargs):		self.mailbox = self.__class__.Mailbox(self, **kwargs)		self.logger_cls = logging.getLogger(self.name)	def run(self):		if self.behavior_mode == Behavior.PROC:			self.unit = multiprocessing.Process(				name=self.name,				target=lambda: self.__class__.service_loop(self)			)		elif self.behavior_mode == Behavior.THREAD:			self.unit = threading.Thread(				name=self.name,				target=lambda: self.__class__.service_loop(self)			)		self.init_mailbox(self.mailbox)		self.unit.daemon = True		self.unit.start()	class Mailbox(object):		def __init__(self, owner, **kwargs):			self.input_queue = None			self.output_queues = []			self.owner = owner	def send_task(self, task):		for q in self.mailbox.output_queues:			q.put(task)	def receive_task(self):		return self.mailbox.input_queue.get()	def rollback(self, task):		self.mailbox.input_queue.put(task)	def service_loop(self):		raise NotImplementedError()	def target(self, task, **kwargs):		raise NotImplementedError()	def init_mailbox(self, mailbox, **kwargs):		pass	def log(self, message):		self.logger_cls.debug(message)class Worker(Service):	name = "worker"	def service_loop(self):		while True:			task = None			try:				task = self.receive_task()				print "{0} just got {1}".format(self.name, task.name)				if not task:					time.sleep(self.main_loop_timeout)				else:					result = self.target(task)					for new_task in result:						if new_task.is_correct():							self.send_task(new_task)			except Exception:				log = [task, traceback.format_exc()]				self.log("main loop error while handling task\n{0}\n{1}".format(*log))				if task: self.rollback(task)	def target(self, task):		return [task]